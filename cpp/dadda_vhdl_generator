#include <iostream>
#include<vector>
#include<stdlib.h>
#include<fstream>
#include<string>
#include<sstream>

#define NBIT 32
using namespace std;

int main()
{
    vector<vector<vector<string>>> dot_graph (7) ;
    vector<vector<string>> graph_app;
    vector<vector<string>> dot_figure;
    int i,j,k,x,w;
    stringstream s_index1;
    stringstream s_index2;
    vector<vector<int>> number_FA_per_level (6);
    vector<vector<int>> number_HA_per_level (6);
    vector<string> add_sumFA_char;
    vector<string> add_sumHA_char;
    int tot_FA,tot_HA;
    int nFA,nHA;
    int iteration;
    int pos_somma_col_succ;
    int number_operators;

    ofstream fout("vhdl_dadda_FA.txt");
    ofstream fout2("vhdl_dadda_HA.txt");
    ofstream fout3("vhdl_dadda_final_stage.txt");
    ofstream fout4("dot_graph.txt");


    for(i=0;i<dot_graph.size();i++)
    {
        dot_graph[i].resize(65);
    }

     ///////////////////////////////////////
    ///RIEMPIMENTO CON PRODOTTI PARZIALI///
   ///////////////////////////////////////

    k=0;
    for(i=0;i<17;i++)
    {
        s_index1<<i;
        for(j=k;j<k+NBIT+1;j++)
        {
            s_index2<<j-k;
            dot_graph[0][j].push_back("a("+s_index1.str()+")"+"("+s_index2.str()+")");
            s_index2.str("");
        }
        s_index1.str("");
        k=k+2;
    }
    dot_graph[0][64].pop_back();  //questo per eliminare il termine 33 dell'ultimo prodotto parziale

     ///////////////////////////////////////
    ///RIEMPIMENTO VALORI SEGNO DX ////////
   ///////////////////////////////////////
   k=0;
   for(i=0;i<17-1;i++)
   {
        s_index1<<i;
        dot_graph[0][k].push_back("s("+s_index1.str()+")");
        s_index1.str("");

     k=k+2;
   }

     ///////////////////////////////////////
    ///RIEMPIMENTO VALORI SEGNO SX  ///////
   ///////////////////////////////////////
   dot_graph[0][NBIT+1].insert(dot_graph[0][NBIT+1].begin(),"s(0)");
   dot_graph[0][NBIT+2].insert(dot_graph[0][NBIT+2].begin(),"s(0)");
   dot_graph[0][NBIT+3].insert(dot_graph[0][NBIT+3].begin(),"sn(1)");
   dot_graph[0][NBIT+3].insert(dot_graph[0][NBIT+3].begin(),"sn(0)");
   k=2;
   for(i=NBIT+4;i<64;i++)
   {
       s_index1<<k;
       if(i%2==0)
       {
           dot_graph[0][i].insert(dot_graph[0][i].begin(),"'1'");
       }
       else
       {
           dot_graph[0][i].insert(dot_graph[0][i].begin(),"sn("+s_index1.str()+")");
           k++;
       }
       s_index1.str("");
   }

     ///////////////////////////////////////
    ///STAMPA VALORI //////////////////////
   ///////////////////////////////////////

    /*for(i=0;i<65;i++)
    {
        for (vector<string>::iterator it=dot_graph[0][i].begin(); it != dot_graph[0][i].end(); ++it)
            fout4 << ' ' << *it;
        fout4<<endl;
    }*/




///applicazione dadda
graph_app=dot_graph[0];
    for(i=0;i<64;i++)
    {
        for(j=0;j<graph_app[i].size();j++)
        {
            graph_app[i][j]={"o"};
        }
    }

for(iteration=0;iteration<6;iteration++)
{
    fout4<<"iterazione numero   "<< iteration<<endl<<endl;

//////////////////////////////////
///DOT GRAPH DOPO FA e HA////////
////////////////////////////////
fout4<<"DOTS GRAPH AT LEVEL "<<iteration<<endl;
    for(i=0;i<17;i++)
    {
        for(j=graph_app.size()-1;j>-1;j--)
        {
            if(i<graph_app[j].size())
                fout4<<graph_app[j][i];
            else
                fout4<<" ";
        }
        fout4<<endl;
    }
    fout4<<endl;

    //stampo dadda al livello corrispondente
    if(iteration==0)
        number_operators=13;
    else if(iteration==1)
        number_operators=9;
    else if(iteration==2)
        number_operators=6;
    else if(iteration==3)
        number_operators=4;
    else if(iteration==4)
        number_operators=3;
    else if(iteration==5)
        number_operators=2;

    dot_figure=graph_app;


    for(i=0;i<graph_app.size();i++)
    {
        nFA=0;
        nHA=0;
        if(graph_app[i].size()>number_operators)
        {
            x=graph_app[i].size()-number_operators;
            nFA=x/2;
            nHA=x%2;
            for(k=0;k<3*nFA;k++)
            {
               dot_figure[i][k]="F" ;
            }

            for(;k<3*nFA+2*nHA;k++)
            {
               dot_figure[i][k]="H" ;
            }


            graph_app[i].resize(graph_app[i].size()-2*nFA-1*nHA,"o");
            graph_app[i+1].resize(graph_app[i+1].size()+1*nFA+1*nHA,"o");
        }

            number_FA_per_level[iteration].push_back(nFA);
            number_HA_per_level[iteration].push_back(nHA);
    }

  //////////////////////////////////
 //DOT GRAPH STEP CON FA E HA//////
//////////////////////////////////

fout4<<"DOTS GRAPH COVRED WITH COMPRESSORS"<<endl;
    for(i=0;i<17;i++)
    {
        for(j=dot_figure.size()-1;j>-1;j--)
        {
            if(i<dot_figure[j].size())
                fout4<<dot_figure[j][i];
            else
                fout4<<" ";
        }
        fout4<<endl;
    }
}
fout4<<"DOTS GRAPH BEFORE FINAL ADDER"<<endl;
    for(i=0;i<17;i++)
    {
        for(j=graph_app.size()-1;j>-1;j--)
        {
            if(i<graph_app[j].size())
                fout4<<graph_app[j][i];
            else
                fout4<<" ";
        }
        fout4<<endl;
    }


    ///////////////////////////
    ///SCRITTURA VHDL ////////
    /////////////////////////
    ///SCRITTURA FULL ADDER///
    for(iteration=0;iteration<6;iteration++)
    {
        fout<<endl<<endl<<"--FAs ITERAZIONE  "<<iteration<<endl<<endl;
        fout2<<endl<<endl<<"--HAs ITERAZIONE  "<<iteration<<endl<<endl;
        k=0; //tiene conto dell'indice del sommtore nella stessa iterazione
        w=0;
        s_index1.str("");
        s_index1<<iteration;
        for(i=0;i<64;i++)
        {

            ///applicazione FA
            add_sumFA_char.clear();
            for(j=0;j<number_FA_per_level[iteration][i];j++)
            {
                s_index2.str("");
                s_index2<<k;
                //scrivo riga vhdl (una per ogni full adder)
                fout<<"FA_"+s_index1.str()<<"_"<<k<<":FA port map ( "<<dot_graph[iteration][i][0]<<","<<dot_graph[iteration][i][1]<<","<<dot_graph[iteration][i][2]<<",cf("<<s_index1.str()<<")("<<s_index2.str()<<")"<<",sf("<<s_index1.str()<<")("<<s_index2.str()<<") );"<<endl;
                //elimino elementi che entrano nel FA (elementi inziali)
                dot_graph[iteration][i].erase(dot_graph[iteration][i].begin(),dot_graph[iteration][i].begin()+3);
                //salvo gli elementi somma da mettere all'inizio della colonna futura
                add_sumFA_char.push_back("sf("+s_index1.str()+")("+s_index2.str()+")");
                //all'inizio della colonna adiacente della iterazione successiva metto il carry
                dot_graph[iteration+1][i+1].insert(dot_graph[iteration+1][i+1].begin(),"cf("+s_index1.str()+")("+s_index2.str()+")");
                //incremento indice
                k++;
            }


            ///applicazione HA
            add_sumHA_char.clear();
            for(j=0;j<number_HA_per_level[iteration][i];j++)
            {
                s_index2.str("");
                s_index2<<w;
                //scrivo riga vhdl (una per ogni half adder)
                fout2<<"HA_"+s_index1.str()<<"_"<<w<<":HA port map ( "<<dot_graph[iteration][i][0]<<","<<dot_graph[iteration][i][1]<<",ch("<<s_index1.str()<<")("<<s_index2.str()<<")"<<",sh("<<s_index1.str()<<")("<<s_index2.str()<<") );"<<endl;
                //elimino elementi che entrano nell' HA (elementi inziali)
                dot_graph[iteration][i].erase(dot_graph[iteration][i].begin(),dot_graph[iteration][i].begin()+2);
                //salvo gli elementi somma da mettere all'inizio della colonna futura
                add_sumHA_char.push_back("sh("+s_index1.str()+")("+s_index2.str()+")");
                //all'inizio della colonna adiacente della iterazione successiva metto il carry
                dot_graph[iteration+1][i+1].insert(dot_graph[iteration+1][i+1].begin(),"ch("+s_index1.str()+")("+s_index2.str()+")");
                //incremento indice
                w++;
            }
            //copio gli elementi di somma HA che devono andare nella iterazione successiva
             dot_graph[iteration+1][i].insert(dot_graph[iteration+1][i].end(),add_sumHA_char.begin(),add_sumHA_char.end());
            //copio gli elementi di somma FA che devono andare nella iterazione successiva
             dot_graph[iteration+1][i].insert(dot_graph[iteration+1][i].end(),add_sumFA_char.begin(),add_sumFA_char.end());
            //copio elementi che sono rimasti della colonna presente nella iterazione succesiiva
             dot_graph[iteration+1][i].insert(dot_graph[iteration+1][i].end(),dot_graph[iteration][i].begin(),dot_graph[iteration][i].end());
        }

    }

    ////////////////////////////////
    ///ADDENDI DELL'ADDER FINALE///
    //////////////////////////////

    for(k=0;k<2;k++)
    {
        for(i=dot_graph[6].size()-1;i>-1;i--)
        {
            if(k<dot_graph[6][i].size())
                fout3<<dot_graph[6][i][k]<<"&";
            else
                fout3<<"'0'&";
        }
        fout3<<endl;
    }


    fout.close();
    fout2.close();
    fout3.close();
    fout4.close();


    return 0;
}

